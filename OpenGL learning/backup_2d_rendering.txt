#include <glad/glad.h>
#include <GLFW/glfw3.h>
#include <stdio.h>
#include <ostream>
#include <iostream>

#include "stb_image.h"

//these headers are for mathemtical calculations (albeit for simple things you can use arrays of float and use a simple math library..)
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>


void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset);
void processInput(GLFWwindow* window);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;

// camera
glm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 3.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);

bool firstMouse = true;
float yaw = -90.0f;	// yaw is initialized to -90.0 degrees since a yaw of 0.0 results in a direction vector pointing to the right so we initially rotate a bit to the left.
float pitch = 0.0f;
float lastX = 800.0f / 2.0;
float lastY = 600.0 / 2.0;
float fov = 45.0f;

// timing
float deltaTime = 0.0f;	// time between current frame and last frame
float lastFrame = 0.0f;


int main() {
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3); //VERSION 3.3
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);
	GLFWwindow* window = glfwCreateWindow(800, 600, "LearnOpenGL", NULL, NULL);

	if (window == NULL) {
		std::cout << "COULD NOT CREATE A WINDOW" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window); //Make the window context we created CURRENT

	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	glViewport(0, 0, 800, 600);
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

	//initialization of rendering data
	float vertices[] = {
		// positions          // colors           // texture coords
	   0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f,   1.0f, 0.0f, // top right
	   0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f,   1.0f, 1.0f, // bottom right
	  -0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f,   0.0f, 1.0f, // bottom left
	  -0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 0.0f,   0.0f, 0.0f  // top left 
	};

	unsigned int indices[] = {  // note that we start from 0!
	0, 1, 3,  // first Triangle
	1, 2, 3   // second Triangle
	};


	const char* vertexShaderSource = "#version 330 core\n"
		"layout (location = 0) in vec3 aPos; \n"
		"layout (location = 1) in vec3 aColor; \n"
		"layout (location = 2) in vec2 aTexCoord; \n"
		"out vec3 ourColor; \n"
		"out vec2 TexCoord; \n"
		"uniform mat4 transMatrix; \n"

		"void main() { \n"
		"ourColor= vec3(aColor); \n"
		"gl_Position =transMatrix * vec4(aPos, 1.0f); \n"
		"TexCoord= vec2(aTexCoord.x , aTexCoord.y ); \n"
		"} \0";
	unsigned int vertexShader;
	vertexShader = glCreateShader(GL_VERTEX_SHADER); //create shader object and reference it through the unint variable
	glShaderSource(vertexShader, 1, &vertexShaderSource, NULL); //IF FORUTH ARGUMENT lengths is NULL, it means all the the source strings are null terminated!!! - this line updates the code of the shader object
	glCompileShader(vertexShader); //compile the shader code of the shader object referenced by: vertexShader
	char infoLog[512];
	int compile_status;
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &compile_status); //QUERY COMPILATION STATUS

	if (compile_status == GL_FALSE) { //if the shader code didn't compile, print the error to the console!
		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog); // this can be obtained even without querying the compile status...
		std::cout << infoLog << std::endl; //print the error log..
	}



	const char* fragmentShaderSource = "#version 330 core\n"
		"out vec4 fragmentColor; \n"
		"in vec3 ourColor; \n"
		"in vec2 TexCoord; \n"
		"uniform sampler2D texture1; \n"
		"uniform sampler2D texture2; \n"
		"void main() { \n"
		"fragmentColor= mix( texture(texture1, TexCoord) , texture(texture2, TexCoord) , 0.2) ; } \0"; //THE LAST LINE SAMPLES THE COLOR OF THE FRAGMENT BY SAMPLING THE TEXTURE and blends it with the original vertices color..

	unsigned int fragmentShader;
	fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
	glCompileShader(fragmentShader);

	//before drawing to the screen , we create a VAO - an object that keeps track of the VBO configurations making it easy to change configurations by only binding the configs to different VAOS..
	// generating VAO's is similar to generetaing VBO's:

	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &compile_status);

	if (compile_status == GL_FALSE) { //DISPLAY ERROR LOG IF FRAGMENT SHADER DIDN'T COMPILE FOR SOME REASON...
		std::cout << "FRAGMENT SHADER COMPILE ERROR" << std::endl;
		glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
		std::cout << infoLog << std::endl; //print the error log..
	}

	//DONE CREATING THE VERTEX AND FRAG SHADERS, NOW COMBINE THEM BY CREATING PORGRAM OBJECT
	//DONE CREATING THE VERTEX AND FRAG SHADERS, NOW COMBINE THEM BY CREATING PORGRAM OBJECT

	//creating a program object, and attaching the shaders to it
	unsigned int shaderProgram;

	shaderProgram = glCreateProgram();
	glAttachShader(shaderProgram, fragmentShader);
	glAttachShader(shaderProgram, vertexShader); //after attaching, finally link the program to create the executables..
	glLinkProgram(shaderProgram); //finishing by linking to create shader executables..
	glGetProgramiv(shaderProgram, GL_LINK_STATUS, &compile_status); // get linking status in order to display error if needed

	if (compile_status == GL_FALSE) { //DISPLAY ERROR LOG IF program shader couldnt link FOR SOME REASON...
		glad_glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
		std::cout << infoLog << std::endl; //print the error log..
	}



	//we can delete the shader objects because after linking the executables were already created with the program object..
	glDeleteShader(vertexShader);
	glDeleteShader(fragmentShader);

	unsigned int VAO;
	glGenVertexArrays(1, &VAO); //first arg is the amount of VAO objects to create names for
	glBindVertexArray(VAO); //EXTREMELY IMPORTANT TO NOT FORGET TO BIND!! BEFORE CONIFUGRING THE VBO'S....





	unsigned int VBO;
	glGenBuffers(1, &VBO);
	glBindBuffer(GL_ARRAY_BUFFER, VBO);
	glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); //transfers data from CPU buffer to GPU buffer - for the currently bound buffer object.

	unsigned int EBO;
	glGenBuffers(1, &EBO);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

	//data transfer to GPU

	// position attribute
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0); //Params meaning in order: location in shader (layout) , number of components per attribute - e.g 3 for vertex color
	//	, type of data - e.g GL_BYTE , normalize - false or true if fixed point data should be normalized, distance in bytes from attribute data of one vertex to another, pointer in the array where data begins
	glEnableVertexAttribArray(0);
	// color attribute
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(1);
	// texture coord attribute
	glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(2);

	//if the attributes are enabled, they will be a part of the drawing context for calls like DrawElements etc..





	//---------------------------------

	//create a Texture object, but first generate the image data using the stb_image.h  library file..

	int width, height, nrChannels;

	unsigned char* data = stbi_load("container.jpg", &width, &height, &nrChannels, 0); //loading the image data to a buffer.. 
	unsigned int texture;
	glGenTextures(1, &texture);
	glBindTexture(GL_TEXTURE_2D, texture);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	if (data) { //if the image was succesfuly loaded, 
		std::cout << "image1 loaded successfuly" << std::endl;
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);

	}
	else {
		std::cout << "Failed to load texture" << std::endl;
	}


	stbi_image_free(data); //free the memory reserved by the loaded image data

	//load the second image to create a second texture.

	unsigned int texture1;
	glGenTextures(1, &texture1);
	glBindTexture(GL_TEXTURE_2D, texture1);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);

	data = stbi_load("awesomeface.png", &width, &height, &nrChannels, 0);
	if (data) { //if the image was succesfuly loaded, 
		std::cout << "image2 loaded successfuly" << std::endl;
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);

	}
	else {
		std::cout << "Failed to load texture" << std::endl;
	}


	//-------------------------------attaching for each uniform sampler the correct texture..
	//ITS ESSENTIAL TO ACTIVAE useProgram() before setting uniforms for the shaders......
	glUseProgram(shaderProgram);
	glUniform1i(glGetUniformLocation(shaderProgram, "texture1"), 0);
	glUniform1i(glGetUniformLocation(shaderProgram, "texture2"), 1);


	glUseProgram(shaderProgram); // causes the shader executables to become part of the current openGL context

	//render loop
	while (!glfwWindowShouldClose(window)) { //as long as this windows closing flag is not set
		//if linking succeeded, we attach the shader executable to the rendering context:
		glClearColor(0.0f, 0.0f, 0.0f, 0.0f);
		glClear(GL_COLOR_BUFFER_BIT);


		glActiveTexture(GL_TEXTURE0);
		glBindTexture(GL_TEXTURE_2D, texture); //NOTICE: THE TEXTURE SHOULD BE BOUND BEFORE ACTUALLY USING THE SHADER PROGRAM:
		glActiveTexture(GL_TEXTURE1);
		glBindTexture(GL_TEXTURE_2D, texture1);

		//DEFINING THE VERTEX TRANSFORMATION DATA - TO SEND TO THE VERTEX SHADER VIA A UNIFORM..
		glm::mat4 transformationMatrix = glm::mat4(1.0f);
		transformationMatrix = glm::translate(transformationMatrix, glm::vec3(0.5, 0.0, 0.0));
		transformationMatrix = glm::rotate(transformationMatrix, glm::radians((float)glfwGetTime()), glm::vec3(0.0f, 0.0f, 1.0f));
		transformationMatrix = glm::scale(transformationMatrix, glm::vec3(0.5f, 0.5f, 0.5f));


		//glUseProgram(shaderProgram); // causes the shader executables to become part of the current openGL context


		unsigned int matrixTransUniformLocation = glGetUniformLocation(shaderProgram, "transMatrix"); //find location of transformMatrix uniform
		glUniformMatrix4fv(matrixTransUniformLocation, 1, GL_FALSE, glm::value_ptr(transformationMatrix)); // send data to the vertex shader uniform


		glBindVertexArray(VAO);


		glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

		glfwSwapBuffers(window); //swap buffers for the current contexted window
		glfwPollEvents();
	}

	glfwTerminate();
	return 0;

	//NOTES FOR SELF: EXERCISE 1 - TO DRAW ANOTHER TRIANGLE ADJACENT TO THE CENTRAL TRIANGLE, TO IMPLEMENT THIS THE DATA VERTICES ARRAY WAS ENLARGED AND WE INITIATED 2 CALLS TO glDrawArrays, each time using different vertices.
	//NOTES ON EXERCISE 2: implement exercise 1 but using different vao's and vbo's: solution is to create 2 different data arrays (each corresponding to 3 different vertices), and assign each one to different VBO and VBO. then make 2 calls to glDrawArrays by binding to the 2 VAO's respectively.
}

//////////

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	float cameraSpeed = static_cast<float>(2.5 * deltaTime);
	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		cameraPos += cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		cameraPos -= cameraSpeed * cameraFront;
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
	// make sure the viewport matches the new window dimensions; note that width and 
	// height will be significantly larger than specified on retina displays.
	glViewport(0, 0, width, height);
}

// glfw: whenever the mouse moves, this callback is called
// -------------------------------------------------------
void mouse_callback(GLFWwindow* window, double xposIn, double yposIn)
{
	float xpos = static_cast<float>(xposIn);
	float ypos = static_cast<float>(yposIn);

	if (firstMouse)
	{
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos; // reversed since y-coordinates go from bottom to top
	lastX = xpos;
	lastY = ypos;

	float sensitivity = 0.1f; // change this value to your liking
	xoffset *= sensitivity;
	yoffset *= sensitivity;

	yaw += xoffset;
	pitch += yoffset;

	// make sure that when pitch is out of bounds, screen doesn't get flipped
	if (pitch > 89.0f)
		pitch = 89.0f;
	if (pitch < -89.0f)
		pitch = -89.0f;

	glm::vec3 front;
	front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	front.y = sin(glm::radians(pitch));
	front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
	cameraFront = glm::normalize(front);
}

// glfw: whenever the mouse scroll wheel scrolls, this callback is called
// ----------------------------------------------------------------------
void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)
{
	fov -= (float)yoffset;
	if (fov < 1.0f)
		fov = 1.0f;
	if (fov > 45.0f)
		fov = 45.0f;
}